# SatMAD: Satellite Mission Analysis and Design for Python
#
# Copyright (C) 2020 Egemen Imre
#
# Licensed under GNU GPL v3.0. See LICENSE.rst for more info.
"""
Two-Line-Elements to represent satellites in Earth orbit.

"""
from astropy import units as u
from astropy.time import Time
from astropy.units import Quantity
from sgp4.exporter import export_tle
from sgp4.model import WGS72, Satrec


class TLE:
    """
    A two-line element set (TLE) is a data format encoding a list of TEME
    (True Equator, Mean Equinox) mean orbital elements
    of an Earth-orbiting object for a given point in time, called the Epoch Time.

    These orbital elements are solely for use with the SGP4 propagator due to the
    analytical orbit theory used in its derivation.

    See the `TLE page in Wikipedia <https://en.wikipedia.org/wiki/Two-line_element_set>`_
    or `NASA definition <https://spaceflight.nasa.gov/realdata/sightings/SSapplications/Post/JavaSSOP/SSOP_Help/tle_def.html>`_
    for more information.

    The TLEs are usually generated by external sources and are used to propagate
    the orbits with the initial condition encapsulated by the TLE.

    Parameters
    ----------
    epoch : Time
        Epoch Time corresponding to the orbital elements (nominally very near
        the time of true ascending node passage)
    inclination : float or Quantity
        TEME mean inclination of the orbit [rad]
    raan : float or Quantity
        TEME mean right ascension of ascending node (RAAN) of the orbit [rad]
    eccentricity : float
        mean eccentricity of the orbit
    arg_perigee : float or Quantity
        TEME mean argument of perigee [rad]
    mean_anomaly : float or Quantity
        mean anomaly of the orbit [rad]
    mean_motion : float or Quantity
        mean motion of the orbit [orbits/day]
    bstar : float or Quantity
        sgp4 type drag coefficient [1 / earth radius] (see TLE class documentation)
    n_dot : float or Quantity
        First time derivative of the mean motion or
        Ballistic Coefficient [revs/day] (see TLE class documentation)
    n_dotdot : float or Quantity
        Second time derivative of the mean motion (see TLE class documentation)
    name : str
        Common name of the satellite
    intl_designator : str
        international designator on card 1 (up to 8 characters) (see class definition)
    sat_num : int
        satellite catalog number (see TLE class documentation)
    classification : str
        Classification (`U` for Unclassified, `C` for Classified, `S` for Secret)
    rev_nr : int
        Revolution number of the object at Epoch Time [revolutions]
    el_nr : int
        Element set number. Incremented when a new TLE is generated for this object.
    """

    # # Gravitational constants(defaults to WGS72)
    # _mu = 398600.8 * u.km ** 3 / u.s ** 2  # in km3 / s2
    # _earth_radius = 6378.135 * u.km  # km
    # _j2 = 0.001082616

    # Hardcoded defaults
    _grav_model = WGS72
    _ops_mode = "i"

    def __init__(
        self,
        epoch,
        inclination,
        raan,
        eccentricity,
        arg_perigee,
        mean_anomaly,
        mean_motion,
        bstar,
        n_dot,
        n_dotdot=0.0,
        name="NONAME",
        intl_designator="12345A",
        sat_num=99999,
        classification="U",
        rev_nr=0,
        el_nr=1,
    ):
        # init internal satrec object
        self._satrec: Satrec = Satrec()

        # recreate the epoch composite
        yydd_str = epoch.utc.to_value("yday", subfmt="date").split(":")
        self._satrec.epochyr = int(yydd_str[0][-2:])
        self._satrec.epochdays = int(yydd_str[1]) + epoch.mjd % 1
        epoch_yydd = self._satrec.epochyr * 1000 + self._satrec.epochdays

        # fill the Satrec object
        self._satrec.sgp4init(
            TLE._grav_model,
            TLE._ops_mode,
            sat_num,
            epoch_yydd,
            bstar,
            n_dot,
            n_dotdot,
            eccentricity,
            arg_perigee,
            inclination,
            mean_anomaly,
            mean_motion,
            raan,
        )

        # fill time with precise Time information
        self._epoch = epoch.utc.replicate(format="isot")
        self._satrec.jdsatepoch = self._epoch.jd1
        self._satrec.jdsatepochF = self._epoch.jd2

        # load other TLE info
        self._satrec.classification = classification
        self._satrec.intldesg = intl_designator
        self._satrec.revnum = rev_nr
        self._satrec.ephtype = "0"  # always 0 in distributed ephemeris
        self._satrec.elnum = el_nr

        # load TLE name
        self._name = name

    @classmethod
    def from_tle(
        cls, line1, line2, name="No Name",
    ):
        """
        Initialises the TLE from two strings.

        Parameters
        ----------
        line1 : str
            First line of the TLE
        line2 : str
            Second line of the TLE
        name : str
            Name of the object / satellite

        Returns
        -------
        TLE
            `TLE` object initialised with the two line input.
        """
        # create object without calling `__init__`
        tle = cls.__new__(cls)

        # load TLE name
        tle._name = name

        # init Satrec object with TLE strings
        tle._satrec = Satrec.twoline2rv(line1, line2, whichconst=TLE._grav_model)

        return tle

    def __str__(self):
        """
        Exports the TLE as a Three-Line string, with name, line1 and line2.

        A sample output looks like this::

            ISS (ZARYA)
            1 25544U 98067A   08264.51782528 -.00002182  00000-0 -11606-4 0  2927
            2 25544  51.6416 247.4627 0006703 130.5360 325.0288 15.72125391563537

        Returns
        -------
        str
            string containing line 1, line 2 and name of the satellite
        """
        line1, line2 = export_tle(self._satrec)

        txt = ""
        if self._name is not None and self._name.strip():
            txt += self._name + "\n"

        txt += line1 + "\n" + line2 + "\n"

        return txt

    @property
    def epoch(self) -> Time:
        """Returns the epoch time associated with the orbital parameters."""
        return self._epoch

    @property
    def bstar(self) -> float:
        """Returns the sgp4 type drag coefficient [1 / earth radius]."""
        return self._satrec.bstar

    @property
    def n_dot(self) -> float:
        """Returns the first time derivative of the mean motion or
        Ballistic Coefficient [revs/day]."""
        return self._satrec.ndot

    @property
    def n_dotdot(self) -> float:
        """Returns the Second time derivative of the mean motion."""
        return self._satrec.ndot

    @property
    def inclination(self) -> Quantity:
        """Returns the TEME mean inclination of the orbit [rad]."""
        return self._satrec.inclo * u.rad

    @property
    def raan(self) -> Quantity:
        """Returns the TEME mean right ascension of ascending node (RAAN)
        of the orbit [rad]."""
        return self._satrec.nodeo * u.rad

    @property
    def eccentricity(self) -> float:
        """Returns the mean eccentricity of the orbit."""
        return self._satrec.ecco

    @property
    def arg_perigee(self) -> Quantity:
        """Returns the TEME mean argument of perigee [rad]."""
        return self._satrec.nodeo * u.rad

    @property
    def mean_anomaly(self) -> Quantity:
        """Returns the mean anomaly of the orbit [rad]."""
        return self._satrec.mo * u.rad

    @property
    def mean_motion(self) -> float:
        """Returns the mean motion of the orbit [rad/sec]."""
        return self._satrec.no_kozai / 60.0

    @property
    def name(self) -> str:
        """Returns the common name of the satellite."""
        return self._name

    @property
    def sat_number(self) -> int:
        """Returns the satellite catalog number."""
        return self._satrec.satnum

    @property
    def intl_designator(self) -> str:
        """Returns the international designator of the satellite."""
        return self._satrec.intldesg

    @property
    def classification(self) -> str:
        """Returns the classification of the satellite."""
        return self._satrec.classification

    @property
    def rev_nr(self) -> int:
        """Returns the Revolution number of the object at Epoch Time [revolutions]."""
        return self._satrec.revnum

    @property
    def el_nr(self) -> int:
        """Returns the Element set number.

        Incremented when a new TLE is generated for this object."""
        return self._satrec.elnum
